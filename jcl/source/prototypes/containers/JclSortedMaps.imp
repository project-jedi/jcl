(*$JPPDEFINEMACRO JCLSORTEDMAPITRIMP(SELFCLASSNAME, ITRINTERFACENAME, MAPCLASSNAME, TYPENAME)
//=== { SELFCLASSNAME } ===============================================================

constructor SELFCLASSNAME.Create(AOwnMap: MAPCLASSNAME; ACursor: Integer; AValid: Boolean; AStart: TItrStart);
begin
  inherited Create(AValid);
  FOwnMap := AOwnMap;
  FStart := AStart;
  FCursor := ACursor;
end;

function SELFCLASSNAME.Add(const AEntry: TYPENAME): Boolean;
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure SELFCLASSNAME.AssignPropertiesTo(Dest: TJclAbstractIterator);
var
  ADest: SELFCLASSNAME;
begin
  inherited AssignPropertiesTo(Dest);
  if Dest is SELFCLASSNAME then
  begin
    ADest := SELFCLASSNAME(Dest);
    ADest.FOwnMap := FOwnMap;
    ADest.FCursor := FCursor;
    ADest.FStart := FStart;
  end;
end;

function SELFCLASSNAME.CreateEmptyIterator: TJclAbstractIterator;
begin
  Result := SELFCLASSNAME.Create(FOwnMap, FCursor, Valid, FStart);
end;

procedure SELFCLASSNAME.Extract;
begin
  CheckValid;
  Valid := False;
  FOwnMap.Extract(FOwnMap.FEntries[FCursor].Key);
end;

function SELFCLASSNAME.GetEntry: TYPENAME;
begin
  CheckValid;
  Result.Key := FOwnMap.FEntries[FCursor].Key;
  Result.Value := FOwnMap.FEntries[FCursor].Value;
end;

function SELFCLASSNAME.HasNext: Boolean;
begin
  if Valid then
    Result := FCursor < (FOwnMap.Size - 1)
  else
    Result := FCursor < FOwnMap.Size;
end;

function SELFCLASSNAME.HasPrevious: Boolean;
begin
  if Valid then
    Result := FCursor > 0
  else
    Result := FCursor >= 0;
end;

function SELFCLASSNAME.Insert(const AEntry: TYPENAME): Boolean;
begin
  raise EJclOperationNotSupportedError.Create;
end;

function SELFCLASSNAME.IteratorEquals(const AIterator: ITRINTERFACENAME): Boolean;
var
  Obj: TObject;
  ItrObj: SELFCLASSNAME;
begin
  Result := False;
  if AIterator = nil then
    Exit;
  Obj := AIterator.GetIteratorReference;
  if Obj is SELFCLASSNAME then
  begin
    ItrObj := SELFCLASSNAME(Obj);
    Result := (FOwnMap = ItrObj.FOwnMap) and (FCursor = ItrObj.FCursor) and (Valid = ItrObj.Valid);
  end;
end;

{$IFDEF SUPPORTS_FOR_IN}
function SELFCLASSNAME.MoveNext: Boolean;
begin
  if Valid then
    Inc(FCursor)
  else
    Valid := True;
  Result := FCursor < FOwnMap.Size;
end;
{$ENDIF SUPPORTS_FOR_IN}

function SELFCLASSNAME.Next: TYPENAME;
begin
  if Valid then
    Inc(FCursor)
  else
    Valid := True;
  Result.Key := FOwnMap.FEntries[FCursor].Key;
  Result.Value := FOwnMap.FEntries[FCursor].Value;
end;

function SELFCLASSNAME.NextIndex: Integer;
begin
  if Valid then
    Result := FCursor + 1
  else
    Result := FCursor;
end;

function SELFCLASSNAME.Previous: TYPENAME;
begin
  if Valid then
    Dec(FCursor)
  else
    Valid := True;
  Result.Key := FOwnMap.FEntries[FCursor].Key;
  Result.Value := FOwnMap.FEntries[FCursor].Value;
end;

function SELFCLASSNAME.PreviousIndex: Integer;
begin
  if Valid then
    Result := FCursor - 1
  else
    Result := FCursor;
end;

procedure SELFCLASSNAME.Remove;
begin
  CheckValid;
  Valid := False;
  FOwnMap.Remove(FOwnMap.FEntries[FCursor].Key);
end;

procedure SELFCLASSNAME.Reset;
begin
  Valid := False;
  case FStart of
    isFirst:
      FCursor := 0;
    isLast:
      FCursor := FOwnMap.Size - 1;
  end;
end;

procedure SELFCLASSNAME.SetEntry(const AEntry: TYPENAME);
begin
  raise EJclOperationNotSupportedError.Create;
end;*)
(*$JPPDEFINEMACRO JCLSORTEDMAPIMP(ENTRYTYPENAME, ENTRYARRAYTYPENAME, SELFCLASSNAME,
  STDMAPINTERFACENAME, SORTEDMAPINTERFACENAME, ENTRYITRINTERFACENAME, ENTRYITRCLASSNAME,
  KEYSETINTERFACENAME, KEYITRINTERFACENAME, VALUECOLLECTIONINTERFACENAME,
  KEYOWNERSHIPDECLARATION, VALUEOWNERSHIPDECLARATION, OWNERSHIPASSIGNMENTS,
  KEYCONSTKEYWORD, KEYTYPENAME, KEYDEFAULT, VALUECONSTKEYWORD, VALUETYPENAME, VALUEDEFAULT,
  CREATEKEYSET, CREATEVALUECOLLECTION)
//=== { SELFCLASSNAME } ==============================================

constructor SELFCLASSNAME.Create(ACapacity: IntegerVALUEOWNERSHIPDECLARATIONKEYOWNERSHIPDECLARATION);
begin
  inherited Create();OWNERSHIPASSIGNMENTS
  SetCapacity(ACapacity);
end;

destructor SELFCLASSNAME.Destroy;
begin
  FReadOnly := False;
  Clear;
  inherited Destroy;
end;

procedure SELFCLASSNAME.AssignDataTo(Dest: TJclAbstractContainerBase);
var
  MyDest: SELFCLASSNAME;
  Index: Integer;
begin
  inherited AssignDataTo(Dest);
  if Dest is SELFCLASSNAME then
  begin
    MyDest := SELFCLASSNAME(Dest);
    MyDest.Clear;
    MyDest.SetCapacity(FSize);
    for Index := 0 to FSize - 1 do
      MyDest.FEntries[Index] := FEntries[Index];
    MyDest.FSize := FSize;
  end;
end;

function SELFCLASSNAME.BinarySearch(KEYCONSTKEYWORDKey: KEYTYPENAME): Integer;
var
  HiPos, LoPos, CompPos: Integer;
  Comp: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    LoPos := 0;
    HiPos := FSize - 1;
    CompPos := (HiPos + LoPos) div 2;
    while HiPos >= LoPos do
    begin
      Comp := KeysCompare(FEntries[CompPos].Key, Key);
      if Comp < 0 then
        LoPos := CompPos + 1
      else
      if Comp > 0 then
        HiPos := CompPos - 1
      else
      begin
        HiPos := CompPos;
        LoPos := CompPos + 1;
      end;
      CompPos := (HiPos + LoPos) div 2;
    end;
    Result := HiPos;
  {$JPPEXPANDMACRO UNLOCK}
end;

procedure SELFCLASSNAME.Clear;
var
  Index: Integer;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    for Index := 0 to FSize - 1 do
    begin
      FreeKey(FEntries[Index].Key);
      FreeValue(FEntries[Index].Value);
    end;
    FSize := 0;
    AutoPack;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.ContainsKey(KEYCONSTKEYWORDKey: KEYTYPENAME): Boolean;
var
  Index: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Index := BinarySearch(Key);
    Result := (Index >= 0) and (KeysCompare(FEntries[Index].Key, Key) = 0);
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.ContainsValue(VALUECONSTKEYWORDValue: VALUETYPENAME): Boolean;
var
  Index: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    for Index := 0 to FSize - 1 do
      if ValuesCompare(FEntries[Index].Value, Value) = 0 then
    begin
      Result := True;
      Break;
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.FirstKey: KEYTYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := KEYDEFAULT;
    if FSize > 0 then
      Result := FEntries[0].Key
    else
    if not FReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Extract(KEYCONSTKEYWORDKey: KEYTYPENAME): VALUETYPENAME;
var
  Index: Integer;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Index := BinarySearch(Key);
    if (Index >= 0) and (KeysCompare(FEntries[Index].Key, Key) = 0) then
    begin
      Result := FEntries[Index].Value;
      FEntries[Index].Value := VALUEDEFAULT;
      FreeKey(FEntries[Index].Key);
      if Index < (FSize - 1) then
        MoveArray(FEntries, Index + 1, Index, FSize - Index - 1);
      Dec(FSize);
      AutoPack;
    end
    else
      Result := VALUEDEFAULT;
  {$JPPEXPANDMACRO UNLOCK}
end;

{$IFDEF SUPPORTS_FOR_IN}
function SELFCLASSNAME.GetEnumerator: ENTRYITRINTERFACENAME;
begin
  Result := ENTRYITRCLASSNAME.Create(Self, 0, False, isFirst);
end;
{$ENDIF SUPPORTS_FOR_IN}

function SELFCLASSNAME.GetValue(KEYCONSTKEYWORDKey: KEYTYPENAME): VALUETYPENAME;
var
  Index: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Index := BinarySearch(Key);
    Result := VALUEDEFAULT;
    if (Index >= 0) and (KeysCompare(FEntries[Index].Key, Key) = 0) then
      Result := FEntries[Index].Value
    else if not FReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.HeadMap(KEYCONSTKEYWORDToKey: KEYTYPENAME): SORTEDMAPINTERFACENAME;
var
  ToIndex: Integer;
  NewMap: SELFCLASSNAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    NewMap := CreateEmptyContainer as SELFCLASSNAME;
    ToIndex := BinarySearch(ToKey);
    if ToIndex >= 0 then
    begin
      NewMap.SetCapacity(ToIndex + 1);
      NewMap.FSize := ToIndex + 1;
      while ToIndex >= 0 do
      begin
        NewMap.FEntries[ToIndex] := FEntries[ToIndex];
        Dec(ToIndex);
      end;
    end;
    Result := NewMap;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.IsEmpty: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := FSize = 0;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.KeyOfValue(VALUECONSTKEYWORDValue: VALUETYPENAME): KEYTYPENAME;
var
  Index: Integer;
  Found: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
   Found := False;
    Result := KEYDEFAULT;
    for Index := 0 to FSize - 1 do
      if ValuesCompare(FEntries[Index].Value, Value) = 0 then
    begin
      Result := FEntries[Index].Key;
      Found := True;
      Break;
    end;

    if (not Found) and (not FReturnDefaultElements) then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.KeySet: KEYSETINTERFACENAME;
var
  Index: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := CREATEKEYSET;
    for Index := 0 to FSize - 1 do
      Result.Add(FEntries[Index].Key);
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.LastKey: KEYTYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := KEYDEFAULT;
    if FSize > 0 then
      Result := FEntries[FSize - 1].Key
    else
    if not FReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.MapEquals(const AMap: STDMAPINTERFACENAME): Boolean;
var
  Index: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    if AMap = nil then
      Exit;
    if FSize <> AMap.Size then
      Exit;
    for Index := 0 to FSize - 1 do
    begin
      if AMap.ContainsKey(FEntries[Index].Key) then
      begin
        if ValuesCompare(AMap.GetValue(FEntries[Index].Key), FEntries[Index].Value) <> 0 then
          Exit;
      end
      else
        Exit;
    end;
    Result := True;
  {$JPPEXPANDMACRO UNLOCK}
end;

{$JPPUNDEF GENERIC}{$IFDEF KEYGENERIC}{$JPPDEFINE GENERIC}{$ENDIF}{$IFDEF VALUEGENERIC}{$JPPDEFINE GENERIC}{$ENDIF}{$JPPUNDEF REFCOUNTED}{$IFDEF KEYREFCOUNTED}{$JPPDEFINE REFCOUNTED}{$ENDIF}{$IFDEF VALUEREFCOUNTED}{$JPPDEFINE REFCOUNTED}{$ENDIF}{$JPPUNDEF ZEROINIT}{$IFDEF KEYZEROINIT}{$JPPDEFINE ZEROINIT}{$ENDIF}{$IFDEF VALUEZEROINIT}{$JPPDEFINE ZEROINIT}{$ENDIF}{$JPPEXPANDMACRO MOVEARRAYIMP[MoveArray|ENTRYARRAYTYPENAME|Default(ENTRYTYPENAME)|SELFCLASSNAME.|]}

procedure SELFCLASSNAME.PutAll(const AMap: STDMAPINTERFACENAME);
var
  It: KEYITRINTERFACENAME;
  Key: KEYTYPENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    if AMap = nil then
      Exit;
    It := AMap.KeySet.First;
    while It.HasNext do
    begin
      Key := It.Next;
      PutValue(Key, AMap.GetValue(Key));
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

procedure SELFCLASSNAME.PutValue(KEYCONSTKEYWORDKey: KEYTYPENAME; VALUECONSTKEYWORDValue: VALUETYPENAME);
var
  Index: Integer;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    if FAllowDefaultElements or ((KeysCompare(Key, KEYDEFAULT) <> 0) and (ValuesCompare(Value, VALUEDEFAULT) <> 0)) then
    begin
      Index := BinarySearch(Key);

      if (Index >= 0) and (KeysCompare(FEntries[Index].Key, Key) = 0) then
      begin
        FreeValue(FEntries[Index].Value);
        FEntries[Index].Value := Value;
      end
      else
      begin
        if FSize = FCapacity then
          AutoGrow;
        if FSize < FCapacity then
        begin
          Inc(Index);
          if (Index < FSize) and (KeysCompare(FEntries[Index].Key, Key) <> 0) then
            MoveArray(FEntries, Index, Index + 1, FSize - Index);
          FEntries[Index].Key := Key;
          FEntries[Index].Value := Value;
          Inc(FSize);
        end;
      end;
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Remove(KEYCONSTKEYWORDKey: KEYTYPENAME): VALUETYPENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := Extract(Key);
    Result := FreeValue(Result);
  {$JPPEXPANDMACRO UNLOCK}
end;

procedure SELFCLASSNAME.SetCapacity(Value: Integer);
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    if FSize <= Value then
    begin
      SetLength(FEntries, Value);
      inherited SetCapacity(Value);
    end
    else
      raise EJclOperationNotSupportedError.Create;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Size: Integer;
begin
  Result := FSize;
end;

function SELFCLASSNAME.SubMap(KEYCONSTKEYWORDFromKey, ToKey: KEYTYPENAME): SORTEDMAPINTERFACENAME;
var
  FromIndex, ToIndex: Integer;
  NewMap: SELFCLASSNAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    NewMap := CreateEmptyContainer as SELFCLASSNAME;
    FromIndex := BinarySearch(FromKey);
    if (FromIndex = -1) or (KeysCompare(FEntries[FromIndex].Key, FromKey) < 0) then
      Inc(FromIndex);
    ToIndex := BinarySearch(ToKey);
    if (FromIndex >= 0) and (FromIndex <= ToIndex) then
    begin
      NewMap.SetCapacity(ToIndex - FromIndex + 1);
      NewMap.FSize := ToIndex - FromIndex + 1;
      while ToIndex >= FromIndex do
      begin
        NewMap.FEntries[ToIndex - FromIndex] := FEntries[ToIndex];
        Dec(ToIndex);
      end;
    end;
    Result := NewMap;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.TailMap(KEYCONSTKEYWORDFromKey: KEYTYPENAME): SORTEDMAPINTERFACENAME;
var
  FromIndex, Index: Integer;
  NewMap: SELFCLASSNAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    NewMap := CreateEmptyContainer as SELFCLASSNAME;
    FromIndex := BinarySearch(FromKey);
    if (FromIndex = -1) or (KeysCompare(FEntries[FromIndex].Key, FromKey) < 0) then
      Inc(FromIndex);
    if (FromIndex >= 0) and (FromIndex < FSize) then
    begin
      NewMap.SetCapacity(FSize - FromIndex);
      NewMap.FSize := FSize - FromIndex;
      Index := FromIndex;
      while Index < FSize do
      begin
        NewMap.FEntries[Index - FromIndex] := FEntries[Index];
        Inc(Index);
      end;
    end;
    Result := NewMap;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Values: VALUECOLLECTIONINTERFACENAME;
var
  Index: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := CREATEVALUECOLLECTION;
    for Index := 0 to FSize - 1 do
      Result.Add(FEntries[Index].Value);
  {$JPPEXPANDMACRO UNLOCK}
end;*)